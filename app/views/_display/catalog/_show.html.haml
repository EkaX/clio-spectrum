-# DISPLAY/CATALOG/SHOW
/ views/_display/catalog/_show.html.haml

-# ALL item formats, ALL catalog-based datasources, use this partial to
-# build the shell of the single-item item-detail page.
-# (then calls render_document_view() for format-specific field lists)


= render :partial => "_formats/clio/catalog_show_toolbar", :locals => { :document => document }

= render("/link_to_prod", id: @document.id, view: 'patron') if @document.backstage?

.show-document{:class => ("database_record" if document.is_database?)}
  .title
    %h4= document_heading.listify.join("").html_safe

  .row
    .info.col-sm-6.col-xs-6
      = render '/coins', document: document

      = render_document_view(document, :template => "catalog_show", :format => "clio")

      -# NEXT-923 - for all formats, for all data-sources, include a stable
      -# "Bookmark As" link to get back to this record.  Hardcode to prod CLIO URL.
      - bookmark_as_url = "https://clio.columbia.edu/catalog/#{document.id}"
      = add_row('Bookmark As', link_to(bookmark_as_url, bookmark_as_url) )

      -# On narrow screen (single-column of div.info, div.holdings), make sure 
      -# div.info expands enough to prevent overlapping by the holdings box
      -# NOTE: to force side-by-side print output, we've added "col-xs-6" to both
      -# info and holdings.  But this also means we never stack on small devices.
      -# Not optimal.
      .clear-both

    .holdings-container.col-sm-6.col-xs-6

      -# Database Notes and Alerts
      -# html_safe true, so that ERC can embed HTML links in their alert msgs
      - if document.active_item_alert_count > 0
        .well
          -# "alert" alerts
          - document.item_alerts[:alert].each do | alert |
            - if alert.active?
              .alert_alert
                = "ALERT:  #{alert[:message]}".html_safe
  
          -# "access requirements" alerts
          - document.item_alerts[:access_requirements].each do | alert |
            - if alert.active?
              = add_row(ItemAlert::ALERT_TYPES['access_requirements'], alert[:message], options = {:html_safe => true})
  
      -# this partial renders each holdings block in turn:
      -# - online holdings
      -# - physical holdings (either Solr MARC Holdings or AJAX call)
      -# - law holdings
      -# - google holdings
      -# - hathi holdings
      = render "_formats/clio/catalog_show_holdings", document: document
      
  .clear-both

-#  ====  VIRTUAL SHELF VIEW - MINI BROWSE  ====
= render "/browse/mini_browse_panel", :document => document

-# this partial inserts the javascript to fetch book data from Google,
-# and pass it to update_google_holdings() [defined in holdings.js]
= render "google_books_check", :documents => document

- if active_source == "databases" && can?(:manage, ItemAlert)
  = render "/_formats/database/catalog_manage_alert", :document => document

